{"version":3,"sources":["utils/Api.js","components/RenderCardComponent.js","components/StoryComponent.js","components/UserComponent.js","components/NewComponent.js","components/CommentsComponent.js","App.js","serviceWorker.js","index.js"],"names":["base_api","append_pretty","getTopStoryIds","a","axios","get","then","response","data","slice","getNewStoryIds","getItem","id","getUser","getPosts","idArray","Promise","all","map","returnList","length","filter","item","type","deleted","getComments","RenderCard","props","renderCard","bind","listPosts","this","postsArray","post","List","Item","key","Card","Group","fluid","color","Content","Header","href","url","title","Description","by","Date","time","toDateString","descendants","Component","StoryComponent","state","isLoading","topStoryIds","api","setState","UserComponent","isLoadingUser","isLoadingPost","activeUser","match","params","submitted","Meta","created","karma","dangerouslySetInnerHTML","__html","about","Fragment","RenderCardComponent","NewComponent","newStoryIds","CommentsComponent","isLoadingComments","commentsArray","activePost","renderUserCard","kids","comment","text","App","basename","Grid","centered","Column","width","Menu","name","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.800b5b53.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst base_api = \"https://hacker-news.firebaseio.com/v0/\";\nconst append_pretty = \".json?print=pretty\";\n\n// Gets the top 500 stories, returns the top 50.\nexport async function getTopStoryIds() {\n  return await axios.get(`${base_api}topstories${append_pretty}`).then(response => {\n    return response.data.slice(0, 50)\n  })\n}\n\n// Gets the newest 500 stories, returns the top 50.\nexport async function getNewStoryIds() {\n  return await axios.get(`${base_api}newstories${append_pretty}`).then(response => {\n    return response.data.slice(0, 50)\n  })\n}\n\n// Gets any item's data \nexport async function getItem(id) {\n  return await axios.get(`${base_api}item/${id}${append_pretty}`).then(response => {\n    return response.data\n  })\n}\n\n// Returns JSON user object / data given the id\nexport async function getUser(id) {\n  return await axios.get(`${base_api}user/${id}${append_pretty}`).then(response => {\n    return response.data\n  })\n}\n\n// Takes an array of id's and returns JSON object data, filtered for stories. \n// Also filters out deleted stories. \nexport async function getPosts(idArray) {\n  const returnList = await Promise.all(\n    idArray.map(id =>\n      axios.get(`${base_api}item/${id}${append_pretty}`).then(response => {\n        return response.data\n      })\n    )\n  );\n  if (returnList.length > 50) {\n    return returnList.filter((item) => !!item && item.type === \"story\" && !item.deleted).slice(0, 50)\n  }\n  else {\n    return returnList.filter((item) => !!item && item.type === \"story\" && !item.deleted)\n  }\n}\n\n// Pretty much the same as getPosts except unlimited comments...\nexport async function getComments(idArray){\n  const returnList = await Promise.all(\n    idArray.map(id =>\n      axios.get(`${base_api}item/${id}${append_pretty}`).then(response => {\n        return response.data\n      })\n    )\n  );\n  return returnList;\n}","import React, { Component } from 'react';\nimport { Card, List } from 'semantic-ui-react';\n\nclass RenderCard extends Component {\n\n    constructor(props) {\n        super(props)\n        this.renderCard = this.renderCard.bind(this);\n    }\n\n    renderCard() {\n        const listPosts = this.props.postsArray.map((post) =>\n            <List.Item key={post.id}>\n                <Card.Group>\n                    <Card fluid color='red'>\n                        <Card.Content>\n                            <Card.Header><a href={post.url}>{post.title}</a></Card.Header>\n                            <Card.Description>\n                                <p>By: <a href={'/user/' + post.by}>{post.by + ' '}</a>\n                                    On: {new Date(post.time * 1000).toDateString() + ' '}\n                                    With <a href={'/post/' + post.id}>{post.descendants}</a> comments.</p>\n                            </Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Card.Group>\n            </List.Item>\n        );\n        return (\n            <List>{listPosts}</List>\n        );\n    }\n\n    render() {\n        return (\n            this.renderCard()\n        );\n    }\n}\n\nexport default RenderCard;","import React, { Component } from 'react';\nimport * as api from '../utils/Api';\nimport RenderCard from './RenderCardComponent';\n\nclass StoryComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: true,\n            topStoryIds: null,\n            postsArray: null\n        }\n    }\n\n    async componentDidMount() {\n        let topStoryIds = await api.getTopStoryIds()\n        this.setState({ topStoryIds })\n        await api.getPosts(topStoryIds).then(postsArray => this.setState({ postsArray }));\n        this.setState({ isLoading: false })\n    }\n\n    render() {\n        if (!this.state.isLoading) {\n            return (\n                <RenderCard postsArray={this.state.postsArray} />\n            );\n        }\n        else if (this.state.isLoading) {\n            return <p>Loading...</p>\n        }\n        else {\n            return <p>Something went wrong!</p>\n        }\n    }\n}\n\nexport default StoryComponent;","import React, { Component } from 'react';\nimport { Card } from 'semantic-ui-react';\nimport * as api from '../utils/Api';\nimport RenderCardComponent from '../components/RenderCardComponent';\n\nclass UserComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoadingUser: true,\n            isLoadingPost: true,\n            activeUser: null,\n            postsArray: []\n        }\n    }\n\n    async componentDidMount() {\n        let activeUser = await api.getUser(this.props.match.params.id);\n        this.setState({ activeUser })\n        this.setState({isLoadingUser: false})\n        // Without this if statement, the getPosts method will recieve potentially thousands of \n        // get requests, crashing the browser. \n        if (activeUser.submitted.length >= 50){\n            activeUser.submitted = activeUser.submitted.slice(0, 50)\n        }\n        await api.getPosts(activeUser.submitted).then(postsArray => this.setState({ postsArray }));\n        this.setState({ isLoadingPost: false })\n      }\n\n    renderCard() {\n        return (\n            <Card.Group>\n                <Card fluid color='red'>\n                    <Card.Content>\n                        <Card.Header>{this.state.activeUser.id}</Card.Header>\n                        <Card.Meta>\n                            <p>Joined: {new Date(this.state.activeUser.created * 1000).toDateString() + ' '}\n                                has {this.state.activeUser.karma} karma.</p>\n                        </Card.Meta>\n                        <Card.Description>\n                            <div dangerouslySetInnerHTML={{ __html: this.state.activeUser.about }}></div>\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            </Card.Group>\n        );\n    }\n    render() {\n        if (!this.state.isLoadingUser && this.state.activeUser != null) {\n            return (\n                <React.Fragment>\n                    {this.renderCard()}\n                    <h3>Posts</h3>\n                    {!this.state.isLoadingPost && this.state.postsArray ? <RenderCardComponent postsArray={this.state.postsArray} /> : <p>Loading...</p>}\n                </React.Fragment>\n            );\n        }\n        else if (this.state.isLoadingUser) {\n            return <p>Loading...</p>\n        }\n        else if (!this.state.activeUser) {\n            return <p>User is null (user may not exist). Usernames are case sensitive.</p>\n        }\n        else {\n            return <p>Something went wrong!</p>\n        }\n    }\n}\n\nexport default UserComponent;","import React, { Component } from 'react';\nimport * as api from '../utils/Api';\nimport RenderCard from './RenderCardComponent';\n\nclass NewComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: true,\n            newStoryIds: [],\n            postsArray: []\n        }\n    }\n\n    async componentDidMount() {\n        let newStoryIds = await api.getNewStoryIds()\n        this.setState({ newStoryIds })\n        await api.getPosts(newStoryIds).then(postsArray => this.setState({ postsArray }));\n        this.setState({ isLoading: false })\n      }\n\n    render() {\n        if (!this.state.isLoading) {\n            return (\n                <RenderCard postsArray={this.state.postsArray} />\n            );\n        }\n        else if (this.state.isLoading) {\n            return <p>Loading...</p>\n        }\n        else {\n            return <p>Something went wrong!</p>\n        }\n    }\n}\n\nexport default NewComponent;","import React, { Component } from 'react';\nimport { Card, List } from 'semantic-ui-react';\nimport * as api from '../utils/Api';\n\nclass CommentsComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoadingUser: true,\n            isLoadingComments: true,\n            commentsArray: [],\n            activePost: null,\n        }\n        this.renderUserCard = this.renderUserCard.bind(this);\n    }\n\n    async componentDidMount() {\n        let activePost = await api.getItem(this.props.match.params.id);\n        this.setState({ activePost })\n        this.setState({isLoadingUser: false})\n        await api.getComments(activePost.kids).then(commentsArray => this.setState({ commentsArray }))\n        this.setState({ isLoadingComments: false })\n      }\n\n    renderCard() {\n        const listPosts = this.state.commentsArray.map((comment) =>\n            <List.Item key={comment.id}>\n                <Card.Group>\n                    <Card fluid color='red'>\n                        <Card.Content>\n                            <Card.Meta>\n                                <p>By: <a href={'/user/' + comment.by}>{comment.by + ' '}</a>\n                                    On: {new Date(comment.time * 1000).toDateString() + ' '}</p>\n                            </Card.Meta>\n                            <Card.Description>\n                                <div dangerouslySetInnerHTML={{ __html: comment.text }}></div>\n                            </Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Card.Group>\n            </List.Item>\n        );\n        return (\n            <List>{listPosts}</List>\n        );\n    }\n\n    renderUserCard() {\n        const post = this.state.activePost;\n        return (\n            <Card.Group>\n                <Card fluid color='red'>\n                    <Card.Content>\n                        <Card.Header><a href={post.url}>{post.title}</a></Card.Header>\n                        <Card.Description>\n                            <p>By: <a href={'/user/' + post.by}>{post.by + ' '}</a>\n                                On: {new Date(post.time * 1000).toDateString() + ' '}\n                                With <a href={'/post/' + post.id}>{post.descendants}</a> comments.</p>\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            </Card.Group>\n        );\n    }\n\n    render() {\n        if (!this.state.isLoadingUser) {\n            return (\n                <React.Fragment>\n                    {this.renderUserCard()}\n                    <h3>Comments</h3>\n                    {!this.state.isLoadingComments ? this.renderCard() : <p>Loading...</p>}\n                </React.Fragment>\n            );\n        }\n        else if (this.state.isLoadingUser) {\n            return <p>Loading...</p>\n        }\n        else if (!this.state.activePost) {\n            return <p>Post is null (post may not exist).</p>\n        }\n        else {\n            return <p>Something went wrong!</p>\n        }\n    }\n}\n\nexport default CommentsComponent;","import React from 'react';\nimport StoryComponent from './components/StoryComponent';\nimport UserComponent from './components/UserComponent';\nimport NewComponent from './components/NewComponent';\nimport CommentsComponent from './components/CommentsComponent';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { Menu, Grid } from 'semantic-ui-react'\n\nfunction App() {\n  return (\n    <Router basename=\"/hn-clone\">\n      <div>\n        <nav>\n          <Grid centered={true}>\n            <Grid.Column width={12}>\n              <Menu>\n                <Menu.Item name=\"home\">\n                  <Link to=\"/\">Top Stories</Link>\n                </Menu.Item>\n                <Menu.Item name=\"new\">\n                  <Link to=\"/new\">Newest Stories</Link>\n                </Menu.Item>\n              </Menu>\n            </Grid.Column>\n          </Grid>\n        </nav>\n        <Switch>\n          <Grid centered={true}>\n            <Grid.Column width={12}>\n              <Route exact path=\"/new\">\n                <NewComponent />\n              </Route>\n              <Route exact path=\"/\">\n                <StoryComponent />\n              </Route>\n              <Route exact path='/user/:id' component={UserComponent} />\n              <Route exact path='/post/:id' component={CommentsComponent} />\n            </Grid.Column>\n          </Grid>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-less/semantic.less';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}